{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/movies.service.ts","./src/app/movies/movies.component.ts","./src/app/movies/movies.component.html","./src/app/people.service.ts","./src/app/people/people.component.ts","./src/app/people/people.component.html","./src/app/planets.service.ts","./src/app/planets/planets.component.ts","./src/app/planets/planets.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'sw-explorer';\n}\n","<div class=\"container\">\n   <div class=\"left-panel\">\n      <mat-toolbar color=\"primary\">\n        <mat-toolbar-row>\n           <i class=\"material-icons\">dehaze</i>\n           <span>Star Wars Explorer</span>\n        </mat-toolbar-row>\n      </mat-toolbar>\n      <button mat-raised-button  color=\"primary\" routerLink=\"/people\">People</button>\n      <button mat-raised-button  color=\"primary\" routerLink=\"/movies\">Movies</button>\n      <button mat-raised-button  color=\"primary\" routerLink=\"/planets\">Planets</button>\n   </div>\n   <div class=\"right-panel\">\n      <router-outlet></router-outlet>\n   </div>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatListModule} from '@angular/material/list';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PeopleComponent } from './people/people.component';\nimport { MoviesComponent } from './movies/movies.component';\nimport { PlanetsComponent } from './planets/planets.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nconst appRoutes: Routes = [\n   { path: 'movies', component: MoviesComponent},\n   { path: 'people', component: PeopleComponent},\n   { path: 'planets', component: PlanetsComponent},\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PeopleComponent,\n    MoviesComponent,\n    PlanetsComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatListModule,\n    MatCardModule,\n    MatProgressSpinnerModule,\n    RouterModule.forRoot(\n       appRoutes\n    ),\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { MoviesRoot, Movie } from './movies.models';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MoviesService {\n\n   private readonly MOVIES_URL = \"https://swapi.co/api/films/\"; \n\n   public loaded:boolean = false;\n   public movies:Observable<Movie[]>;\n\n   constructor(private http:HttpClient) {\n      this.movies = this.http.get<MoviesRoot>(this.MOVIES_URL).pipe(\n                        map(res => res.results),\n                        tap(() => this.loaded = true)\n                     );\n   }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MoviesService } from '../movies.service';\nimport { Movie } from '../movies.models';\n\n@Component({\n  selector: 'app-movies',\n  templateUrl: './movies.component.html',\n  styleUrls: ['./movies.component.scss']\n})\nexport class MoviesComponent implements OnInit {\n\n  public selected: Movie;\n\n  constructor(public moviesService: MoviesService) { }\n\n  ngOnInit(): void {}\n\n  public select(movie: Movie) {\n     this.selected = movie;\n  }\n\n}\n","<div class=\"content-panel\">\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n         <mat-toolbar-row>\n            <i class=\"material-icons\">dehaze</i>\n            <span>Movies</span>\n         </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-list>\n         <mat-list-item *ngFor=\"let movie of moviesService.movies | async\"\n               [class.selected]=\"selected && movie.episode_id == selected.episode_id\"\n               (click)=\"select(movie)\"\n            > \n            <i class=\"material-icons\">insert_emoticon</i>\n            {{movie.title}}\n         </mat-list-item>\n      </mat-list>\n      <mat-progress-spinner mode=\"indeterminate\" *ngIf=\"!moviesService.loaded\"></mat-progress-spinner>\n   </div>\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n        <mat-toolbar-row>\n           <i class=\"material-icons\">dehaze</i>\n           <span>Details</span>\n        </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-card *ngIf=\"selected\">\n         <mat-card-title>\n            {{selected.title}}\n         </mat-card-title>\n         <mat-card-content>\n            <mat-list>\n               <mat-list-item>\n                  <h5 matLine>Director</h5>\n                  <p matLine>{{selected.director}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Producers</h5>\n                  <p matLine>{{selected.producer}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Release Date</h5>\n                  <p matLine>{{selected.release_date}}</p>\n               </mat-list-item>\n            </mat-list>\n         </mat-card-content>\n      </mat-card>\n   </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { PeopleRoot, Person } from './people.models';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PeopleService {\n\n   private readonly PEOPLE_URL = \"https://swapi.co/api/people/\"; \n\n   public loaded:boolean = false;\n   public people:Observable<Person[]>;\n\n   constructor(private http:HttpClient) {\n      this.people = this.http.get<PeopleRoot>(this.PEOPLE_URL).pipe(\n                        map(res => res.results),\n                        tap(() => this.loaded = true)\n                     );\n   }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { PeopleService } from '../people.service';\nimport { Person } from '../people.models';\n\n@Component({\n  selector: 'app-people',\n  templateUrl: './people.component.html',\n  styleUrls: ['./people.component.scss']\n})\nexport class PeopleComponent implements OnInit {\n\n  public selected: Person;\n\n  constructor(public peopleService: PeopleService) { }\n\n  ngOnInit(): void {}\n\n  public select(person: Person) {\n     this.selected = person;\n  }\n\n}\n","<div class=\"content-panel\">\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n         <mat-toolbar-row>\n            <i class=\"material-icons\">dehaze</i>\n            <span>People</span>\n         </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-list>\n         <mat-list-item *ngFor=\"let person of peopleService.people | async\"\n               [class.selected]=\"selected && person.name == selected.name\"\n               (click)=\"select(person)\"\n            > \n            <i class=\"material-icons\">insert_emoticon</i>\n            {{person.name}}\n         </mat-list-item>\n      </mat-list>\n      <mat-progress-spinner mode=\"indeterminate\" *ngIf=\"!peopleService.loaded\"></mat-progress-spinner>\n   </div>\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n        <mat-toolbar-row>\n           <i class=\"material-icons\">dehaze</i>\n           <span>Details</span>\n        </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-card *ngIf=\"selected\">\n         <mat-card-title>\n            {{selected.name}}\n         </mat-card-title>\n         <mat-card-content>\n            <mat-list>\n               <mat-list-item>\n                  <h5 matLine>Height</h5>\n                  <p matLine>{{selected.height}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Mass</h5>\n                  <p matLine>{{selected.mass}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Hair Color</h5>\n                  <p matLine>{{selected.hair_color}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Skin Color</h5>\n                  <p matLine>{{selected.skin_color}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Gender</h5>\n                  <p matLine>{{selected.gender}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Birth Year</h5>\n                  <p matLine>{{selected.birth_year}}</p>\n               </mat-list-item>\n            </mat-list>\n         </mat-card-content>\n      </mat-card>\n   </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { PlanetsRoot, Planet } from './planets.models';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlanetsService {\n\n   private readonly PLANETS_URL = \"https://swapi.co/api/planets/\"; \n\n   public loaded:boolean = false;\n   public planets:Observable<Planet[]>;\n\n   constructor(private http:HttpClient) {\n      this.planets = this.http.get<PlanetsRoot>(this.PLANETS_URL).pipe(\n                        map(res => res.results),\n                        tap(() => this.loaded = true)\n                     );\n   }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { PlanetsService } from '../planets.service';\nimport { Planet } from '../planets.models';\n\n@Component({\n  selector: 'app-planets',\n  templateUrl: './planets.component.html',\n  styleUrls: ['./planets.component.scss']\n})\nexport class PlanetsComponent implements OnInit {\n\n  public selected: Planet;\n\n  constructor(public planetsService: PlanetsService) { }\n\n  ngOnInit(): void {}\n\n  public select(planet: Planet) {\n     this.selected = planet;\n  }\n\n}\n","<div class=\"content-panel\">\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n         <mat-toolbar-row>\n            <i class=\"material-icons\">dehaze</i>\n            <span>Planets</span>\n         </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-list>\n         <mat-list-item *ngFor=\"let planet of planetsService.planets | async\"\n               [class.selected]=\"selected && planet.name == selected.name\"\n               (click)=\"select(planet)\"\n            > \n            <i class=\"material-icons\">insert_emoticon</i>\n            {{planet.name}}\n         </mat-list-item>\n      </mat-list>\n      <mat-progress-spinner mode=\"indeterminate\" *ngIf=\"!planetsService.loaded\"></mat-progress-spinner>\n   </div>\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n        <mat-toolbar-row>\n           <i class=\"material-icons\">dehaze</i>\n           <span>Details</span>\n        </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-card *ngIf=\"selected\">\n         <mat-card-title>\n            {{selected.name}}\n         </mat-card-title>\n         <mat-card-content>\n            <mat-list>\n               <mat-list-item>\n                  <h5 matLine>Terrain</h5>\n                  <p matLine>{{selected.terrain}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Population</h5>\n                  <p matLine>{{selected.population}}</p>\n               </mat-list-item>\n            </mat-list>\n         </mat-card-content>\n      </mat-card>\n   </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}