{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/movies.service.ts","webpack:///src/app/movies/movies.component.ts","webpack:///src/app/movies/movies.component.html","webpack:///src/app/people.service.ts","webpack:///src/app/people/people.component.ts","webpack:///src/app/people/people.component.html","webpack:///src/app/planets.service.ts","webpack:///src/app/planets/planets.component.ts","webpack:///src/app/planets/planets.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","appRoutes","path","component","AppModule","declarations","providers","bootstrap","MoviesService","http","MOVIES_URL","loaded","movies","get","pipe","res","results","providedIn","MoviesComponent","moviesService","movie","selected","PeopleService","PEOPLE_URL","people","PeopleComponent","peopleService","person","PlanetsService","PLANETS_URL","planets","PlanetsComponent","planetsService","planet","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'sw-explorer';\n}\n","<div class=\"container\">\n   <div class=\"left-panel\">\n      <mat-toolbar color=\"primary\">\n        <mat-toolbar-row>\n           <i class=\"material-icons\">dehaze</i>\n           <span>Star Wars Explorer</span>\n        </mat-toolbar-row>\n      </mat-toolbar>\n      <button mat-raised-button  color=\"primary\" routerLink=\"/people\">People</button>\n      <button mat-raised-button  color=\"primary\" routerLink=\"/movies\">Movies</button>\n      <button mat-raised-button  color=\"primary\" routerLink=\"/planets\">Planets</button>\n   </div>\n   <div class=\"right-panel\">\n      <router-outlet></router-outlet>\n   </div>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatListModule} from '@angular/material/list';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PeopleComponent } from './people/people.component';\nimport { MoviesComponent } from './movies/movies.component';\nimport { PlanetsComponent } from './planets/planets.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nconst appRoutes: Routes = [\n   { path: 'movies', component: MoviesComponent},\n   { path: 'people', component: PeopleComponent},\n   { path: 'planets', component: PlanetsComponent},\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PeopleComponent,\n    MoviesComponent,\n    PlanetsComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatListModule,\n    MatCardModule,\n    MatProgressSpinnerModule,\n    RouterModule.forRoot(\n       appRoutes\n    ),\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { MoviesRoot, Movie } from './movies.models';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MoviesService {\n\n   private readonly MOVIES_URL = \"https://swapi.co/api/films/\"; \n\n   public loaded:boolean = false;\n   public movies:Observable<Movie[]>;\n\n   constructor(private http:HttpClient) {\n      this.movies = this.http.get<MoviesRoot>(this.MOVIES_URL).pipe(\n                        map(res => res.results),\n                        tap(() => this.loaded = true)\n                     );\n   }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MoviesService } from '../movies.service';\nimport { Movie } from '../movies.models';\n\n@Component({\n  selector: 'app-movies',\n  templateUrl: './movies.component.html',\n  styleUrls: ['./movies.component.scss']\n})\nexport class MoviesComponent implements OnInit {\n\n  public selected: Movie;\n\n  constructor(public moviesService: MoviesService) { }\n\n  ngOnInit(): void {}\n\n  public select(movie: Movie) {\n     this.selected = movie;\n  }\n\n}\n","<div class=\"content-panel\">\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n         <mat-toolbar-row>\n            <i class=\"material-icons\">dehaze</i>\n            <span>Movies</span>\n         </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-list>\n         <mat-list-item *ngFor=\"let movie of moviesService.movies | async\"\n               [class.selected]=\"selected && movie.episode_id == selected.episode_id\"\n               (click)=\"select(movie)\"\n            > \n            <i class=\"material-icons\">insert_emoticon</i>\n            {{movie.title}}\n         </mat-list-item>\n      </mat-list>\n      <mat-progress-spinner mode=\"indeterminate\" *ngIf=\"!moviesService.loaded\"></mat-progress-spinner>\n   </div>\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n        <mat-toolbar-row>\n           <i class=\"material-icons\">dehaze</i>\n           <span>Details</span>\n        </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-card *ngIf=\"selected\">\n         <mat-card-title>\n            {{selected.title}}\n         </mat-card-title>\n         <mat-card-content>\n            <mat-list>\n               <mat-list-item>\n                  <h5 matLine>Director</h5>\n                  <p matLine>{{selected.director}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Producers</h5>\n                  <p matLine>{{selected.producer}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Release Date</h5>\n                  <p matLine>{{selected.release_date}}</p>\n               </mat-list-item>\n            </mat-list>\n         </mat-card-content>\n      </mat-card>\n   </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { PeopleRoot, Person } from './people.models';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PeopleService {\n\n   private readonly PEOPLE_URL = \"https://swapi.co/api/people/\"; \n\n   public loaded:boolean = false;\n   public people:Observable<Person[]>;\n\n   constructor(private http:HttpClient) {\n      this.people = this.http.get<PeopleRoot>(this.PEOPLE_URL).pipe(\n                        map(res => res.results),\n                        tap(() => this.loaded = true)\n                     );\n   }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { PeopleService } from '../people.service';\nimport { Person } from '../people.models';\n\n@Component({\n  selector: 'app-people',\n  templateUrl: './people.component.html',\n  styleUrls: ['./people.component.scss']\n})\nexport class PeopleComponent implements OnInit {\n\n  public selected: Person;\n\n  constructor(public peopleService: PeopleService) { }\n\n  ngOnInit(): void {}\n\n  public select(person: Person) {\n     this.selected = person;\n  }\n\n}\n","<div class=\"content-panel\">\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n         <mat-toolbar-row>\n            <i class=\"material-icons\">dehaze</i>\n            <span>People</span>\n         </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-list>\n         <mat-list-item *ngFor=\"let person of peopleService.people | async\"\n               [class.selected]=\"selected && person.name == selected.name\"\n               (click)=\"select(person)\"\n            > \n            <i class=\"material-icons\">insert_emoticon</i>\n            {{person.name}}\n         </mat-list-item>\n      </mat-list>\n      <mat-progress-spinner mode=\"indeterminate\" *ngIf=\"!peopleService.loaded\"></mat-progress-spinner>\n   </div>\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n        <mat-toolbar-row>\n           <i class=\"material-icons\">dehaze</i>\n           <span>Details</span>\n        </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-card *ngIf=\"selected\">\n         <mat-card-title>\n            {{selected.name}}\n         </mat-card-title>\n         <mat-card-content>\n            <mat-list>\n               <mat-list-item>\n                  <h5 matLine>Height</h5>\n                  <p matLine>{{selected.height}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Mass</h5>\n                  <p matLine>{{selected.mass}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Hair Color</h5>\n                  <p matLine>{{selected.hair_color}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Skin Color</h5>\n                  <p matLine>{{selected.skin_color}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Gender</h5>\n                  <p matLine>{{selected.gender}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Birth Year</h5>\n                  <p matLine>{{selected.birth_year}}</p>\n               </mat-list-item>\n            </mat-list>\n         </mat-card-content>\n      </mat-card>\n   </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { PlanetsRoot, Planet } from './planets.models';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlanetsService {\n\n   private readonly PLANETS_URL = \"https://swapi.co/api/planets/\"; \n\n   public loaded:boolean = false;\n   public planets:Observable<Planet[]>;\n\n   constructor(private http:HttpClient) {\n      this.planets = this.http.get<PlanetsRoot>(this.PLANETS_URL).pipe(\n                        map(res => res.results),\n                        tap(() => this.loaded = true)\n                     );\n   }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { PlanetsService } from '../planets.service';\nimport { Planet } from '../planets.models';\n\n@Component({\n  selector: 'app-planets',\n  templateUrl: './planets.component.html',\n  styleUrls: ['./planets.component.scss']\n})\nexport class PlanetsComponent implements OnInit {\n\n  public selected: Planet;\n\n  constructor(public planetsService: PlanetsService) { }\n\n  ngOnInit(): void {}\n\n  public select(planet: Planet) {\n     this.selected = planet;\n  }\n\n}\n","<div class=\"content-panel\">\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n         <mat-toolbar-row>\n            <i class=\"material-icons\">dehaze</i>\n            <span>Planets</span>\n         </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-list>\n         <mat-list-item *ngFor=\"let planet of planetsService.planets | async\"\n               [class.selected]=\"selected && planet.name == selected.name\"\n               (click)=\"select(planet)\"\n            > \n            <i class=\"material-icons\">insert_emoticon</i>\n            {{planet.name}}\n         </mat-list-item>\n      </mat-list>\n      <mat-progress-spinner mode=\"indeterminate\" *ngIf=\"!planetsService.loaded\"></mat-progress-spinner>\n   </div>\n   <div class=\"panel\">\n      <mat-toolbar color=\"primary\">\n        <mat-toolbar-row>\n           <i class=\"material-icons\">dehaze</i>\n           <span>Details</span>\n        </mat-toolbar-row>\n      </mat-toolbar>\n      <mat-card *ngIf=\"selected\">\n         <mat-card-title>\n            {{selected.name}}\n         </mat-card-title>\n         <mat-card-content>\n            <mat-list>\n               <mat-list-item>\n                  <h5 matLine>Terrain</h5>\n                  <p matLine>{{selected.terrain}}</p>\n               </mat-list-item>\n               <mat-list-item>\n                  <h5 matLine>Population</h5>\n                  <p matLine>{{selected.population}}</p>\n               </mat-list-item>\n            </mat-list>\n         </mat-card-content>\n      </mat-card>\n   </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}